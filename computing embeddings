# Function to compute and save embeddings for each model
def compute_query_embedding(query, model):
    return model.encode(query, convert_to_tensor=True)
def compute_embeddings(papers, model, filename, batch_size=128):
    texts = [paper['title'] + ' ' + paper['abstract'] for paper in papers]
    all_embeddings = []

    # Using tqdm for progress bar
    for i in tqdm(range(0, len(texts), batch_size), desc=f"Processing {model.__class__.__name__} Batches"):
        batch_texts = texts[i:i + batch_size]
        batch_embeddings = model.encode(batch_texts, convert_to_tensor=True)
        all_embeddings.append(batch_embeddings)

    embeddings = torch.cat(all_embeddings, dim=0)
    torch.save(embeddings, filename)  # Save the embeddings
    return embeddings

# Paths to save the computed embeddings
embeddings_file_specter = 'corpus_embeddings_specter.pt'
embeddings_file_sbert = 'corpus_embeddings_sbert.pt'

# Check if precomputed embeddings files exist, if not compute and save them
if os.path.exists(embeddings_file_specter):
    corpus_embeddings_specter = torch.load(embeddings_file_specter)
    print("Loaded precomputed SPECTER embeddings.")
else:
    corpus_embeddings_specter = compute_embeddings(papers, model_specter, embeddings_file_specter)
    print("Computed and saved SPECTER embeddings.")

if os.path.exists(embeddings_file_sbert):
    corpus_embeddings_sbert = torch.load(embeddings_file_sbert)
    print("Loaded precomputed SBERT embeddings.")
else:
    corpus_embeddings_sbert = compute_embeddings(papers, model_sbert, embeddings_file_sbert)
    print("Computed and saved SBERT embeddings.")

# Function to normalize scores
def normalize_scores(results):
    scores = [hit['score'] for hit in results]
    min_score = min(scores)
    max_score = max(scores)

    # If all scores are the same, return them unchanged to avoid division by zero
    if max_score == min_score:
        return results

    # Normalize each score between 0 and 1
    for hit in results:
        hit['score'] = (hit['score'] - min_score) / (max_score - min_score)
    return results


Loaded precomputed SPECTER embeddings.
Loaded precomputed SBERT embeddings.
C:\Users\Nony\AppData\Local\Temp\ipykernel_35340\1358427461.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  corpus_embeddings_specter = torch.load(embeddings_file_specter)
C:\Users\Nony\AppData\Local\Temp\ipykernel_35340\1358427461.py:31: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  corpus_embeddings_sbert = torch.load(embeddings_file_sbert)
